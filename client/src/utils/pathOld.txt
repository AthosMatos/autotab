
export function AudioEventAnalyser(
  Seq: (string | string[])[],
  allNotesFromFrets: string[][],
  frets: number
) {
  const AudioEvents: Node[][][] = [];
  Seq.forEach((simultaneousNotes, simulIndex) => {
    const notesPos: Node[][] = [];

    if (typeof simultaneousNotes === "string") {
      const notefromSimultaneous = simultaneousNotes;
      const notePos: Node[] = [];
      allNotesFromFrets.forEach((notesFromString, stringIndex) => {
        const fretIndex = notesFromString.findIndex(
          (noteFromString) => noteFromString === notefromSimultaneous
        );
        if (fretIndex !== -1)
          notePos.push({
            fret: fretIndex,
            string: stringIndex,
            note: notefromSimultaneous
          });
      });
      notesPos.push(notePos);
    } else {
      simultaneousNotes.forEach((notefromSimultaneous, noteIndex) => {
        const notePos: Node[] = [];
        allNotesFromFrets.forEach((notesFromString, stringIndex) => {
          const fretIndex = notesFromString.findIndex(
            (noteFromString) => noteFromString === notefromSimultaneous
          );
          if (fretIndex !== -1)
            notePos.push({
              fret: fretIndex,
              string: stringIndex,
              note: notefromSimultaneous
            });
        });
        notesPos.push(notePos);
      });
    }

    AudioEvents.push(notesPos);
  });

  const Result: NotePositionType[][] = [];
  let referenceAudioEvent: NotePositionType = {
    pos: { fret: 0, string: 0 },
    note: ""
  };

  for (let eventIndex = 0; eventIndex < AudioEvents.length; eventIndex++) {
    const CurrentEvent = AudioEvents[eventIndex];
    const isCurrNote = CurrentEvent.length === 1;
    const isCurrChord = CurrentEvent.length > 1;
    const NextEvent = AudioEvents[eventIndex + 1];
    if (NextEvent === undefined) {
      if (isCurrNote)
        Result.push([
          {
            note: CurrentEvent[0][0].note,
            pos: {
              fret: CurrentEvent[0][0].fret,
              string: CurrentEvent[0][0].string
            }
          }
        ]);
      else {
        dealWithChord();
      }

      break;
    }
    const isNextNote = NextEvent.length === 1;
    const isNextChord = NextEvent.length > 1;

    interface dealWithNoteI {
      pushNext: boolean;
    }
    function dealWithNote(params: dealWithNoteI = { pushNext: true }) {
      let CurrentNotePos = referenceAudioEvent;
      let FirstRun = false;
      if (!Result.length) {
        CurrentNotePos = {
          note: CurrentEvent[0][0].note,
          pos: {
            fret: CurrentEvent[0][0].fret,
            string: CurrentEvent[0][0].string
          }
        };
        FirstRun = true;
      }
      const NextNoteName = NextEvent[0][0].note;

      /* console.log("CurrentNote", CurrentNotePos.note);
			console.log("NextNoteName", NextNoteName); */

      const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } =
        vasculharNotes(CurrentNotePos, NextNoteName, allNotesFromFrets, frets);
      if (FirstRun) Result.push([CurrentNotePos]);
      if (params.pushNext)
        Result.push([
          {
            note: NextNoteName,
            pos: { fret: nextPosNote.fret, string: nextPosNote.string }
          }
        ]);
      referenceAudioEvent = {
        pos: { fret: nextPosNote.fret, string: nextPosNote.string },
        note: NextNoteName
      };
    }
    interface dealWithChordI {
      saveNext: boolean;
    }
    function dealWithChord(params: dealWithChordI = { saveNext: false }) {
      const Positions: NotePositionType[] = [];
      let noteInAnalysis: PosI;
      const stringsUsed: number[] = [];

      //console.log("CurrentEvent", CurrentEvent);

      for (let i = 0; i < CurrentEvent.length - 1; i++) {
        const NoteInChord = CurrentEvent[i];
        let nextNoteinChordName = CurrentEvent[i + 1][0].note;

        if (i === 0) {
          if (referenceAudioEvent.note.length) {
            Positions.push(referenceAudioEvent);
            noteInAnalysis = {
              string: referenceAudioEvent.pos.string,
              fret: referenceAudioEvent.pos.fret
            };
            stringsUsed.push(noteInAnalysis.string);

            /* if (eventIndex > 4) {
							console.log("CurrentEvent", CurrentEvent);
							console.log("noteInAnalysisIF", referenceAudioEvent.note);
						} */
          } else {
            Positions.push({
              note: NoteInChord[0].note,
              pos: { fret: NoteInChord[0].fret, string: NoteInChord[0].string }
            });
            noteInAnalysis = {
              string: NoteInChord[0].string,
              fret: NoteInChord[0].fret
            };
            stringsUsed.push(noteInAnalysis.string);
            /* if (eventIndex > 4) {
							console.log("CurrentEvent", CurrentEvent);
							console.log("noteInAnalysisELSE", NoteInChord[0].note);
						} */
          }
        }

        const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } =
          vasculharChords(
            noteInAnalysis!,
            nextNoteinChordName,
            allNotesFromFrets,
            frets,
            stringsUsed
          );
        stringsUsed.push(nextPosNote.string);
        noteInAnalysis = nextPosNote;
        Positions.push({
          note: nextNoteinChordName,
          pos: { fret: nextPosNote.fret, string: nextPosNote.string }
        });

        //console.log("Positions", Positions);
      }

      Result.push(Positions);
    }
    /* console.log("CurrentEvent", CurrentEvent, "is note", isCurrNote, "is chord", isCurrChord);
     */
    //if curr and next are notes
    if (isCurrNote && isNextNote) {
      dealWithNote();
    }
    //if curr is note and next is chord
    else if (isCurrNote && isNextChord) {
      //console.log("Curr", CurrentEvent, "Next", NextEvent);
      dealWithNote({ pushNext: false });
    }
    //if curr is chord and next is note
    else if (isCurrChord && isNextNote) {
      dealWithChord();
      dealWithNote();
    }
    //console.log("Result", Result);

    //if curr and next are chords
    else if (isCurrChord && isNextChord) {
      const CurrentNotePos = {
        note: CurrentEvent[0][0].note,
        pos: {
          fret: CurrentEvent[0][0].fret,
          string: CurrentEvent[0][0].string
        }
      };
      const NextNoteName = NextEvent[0][0].note;
      /* console.log("CurrentNote", CurrentNotePos.note);
			console.log("NextNoteName", NextNoteName); */

      const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } =
        vasculharNotes(CurrentNotePos, NextNoteName, allNotesFromFrets, frets);
      dealWithChord();

      referenceAudioEvent = {
        pos: { fret: nextPosNote.fret, string: nextPosNote.string },
        note: NextNoteName
      };
    }

    /* console.log("||||||||||||||||||||||||||||||||||||||");
		if (CurrentEvent.length === 1) console.log("CurrentEvent", CurrentEvent[0][0].note);
		else {
			CurrentEvent.forEach((simultaneousNotes, simulIndex) => {
				console.log("CurrentEvent", simultaneousNotes[0].note);
			});
		}
		console.log("---------------------------------");

		if (NextEvent.length === 1) console.log("NextEvent", NextEvent[0][0].note);
		else {
			NextEvent.forEach((simultaneousNotes, simulIndex) => {
				console.log("NextEvent", simultaneousNotes[0].note);
			});
		} */
  }

  return Result;
}

/* export function getPosbySeq3(Seq: (string | string[])[], allNotesFromFrets: string[][], frets: number) {
	const Chords: Node[][][] = [];
	Seq.forEach((simultaneousNotes, simulIndex) => {
		const notesPos: Node[][] = [];

		if (typeof simultaneousNotes === "string") {
			const notefromSimultaneous = simultaneousNotes;
			const notePos: Node[] = [];
			allNotesFromFrets.forEach((notesFromString, stringIndex) => {
				const fretIndex = notesFromString.findIndex((noteFromString) => noteFromString === notefromSimultaneous);
				if (fretIndex !== -1) notePos.push({ fret: fretIndex, string: stringIndex, note: notefromSimultaneous });
			});
			notesPos.push(notePos);
		} else {
			simultaneousNotes.forEach((notefromSimultaneous, noteIndex) => {
				const notePos: Node[] = [];
				allNotesFromFrets.forEach((notesFromString, stringIndex) => {
					const fretIndex = notesFromString.findIndex((noteFromString) => noteFromString === notefromSimultaneous);
					if (fretIndex !== -1) notePos.push({ fret: fretIndex, string: stringIndex, note: notefromSimultaneous });
				});
				notesPos.push(notePos);
			});
		}

		Chords.push(notesPos);
	});

	console.log("Chords", Chords);

	const AllPositions: [string, PosI][][] = [];
	let noteInAnalysis: PosI;

	Chords.forEach((simultaneousNotes, simulIndex) => {
		//let noteInAnalysis: PosI;
		const isChords = simultaneousNotes.length > 1;

		//console.log("simultaneousNotes", simultaneousNotes, isChords);

		function dealChords() {
			const stringsUsed: number[] = [];
			const Positions: [string, PosI][] = [];
			let noteForChordInAnalysis: PosI;
			for (let i = 0; i < simultaneousNotes.length - 1; i++) {
				if (simultaneousNotes.length < 2) break;
				const Notes = simultaneousNotes[i];
				let nextNoteName = simultaneousNotes[i + 1][0].note;
				if (i === 0) {
					Positions.push([Notes[0].note, Notes[0]]);
					noteForChordInAnalysis = { string: Notes[0].string, fret: Notes[0].fret };
					stringsUsed.push(noteForChordInAnalysis.string);
				}

				const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } = vasculharChords(noteForChordInAnalysis!, nextNoteName, allNotesFromFrets, frets, stringsUsed);
				stringsUsed.push(nextPosNote.string);
				noteForChordInAnalysis = nextPosNote;
				Positions.push([nextNoteName, nextPosNote]);
			}
			AllPositions.push(Positions);
		}

		function dealNotes() {
			const Notes = simultaneousNotes[0];

			if (simulIndex + 1 == Chords.length) return;
			const nextN = Chords[simulIndex + 1];
			if (nextN.length > 1) {
				AllPositions.push([[Notes[0].note, Notes[0]]]);
				return;
			}
			const nextNotes = nextN[0];
			const nextNoteName = nextNotes[0].note;

			if (simulIndex === 0) {
				AllPositions.push([[Notes[0].note, Notes[0]]]);
				noteInAnalysis = { string: Notes[0].string, fret: Notes[0].fret };
			}

			const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } = vasculharNotes(noteInAnalysis!, nextNoteName, allNotesFromFrets, frets);

			console.log("nextPosNote", nextPosNote);

			noteInAnalysis = nextPosNote;
			AllPositions.push([[nextNoteName, nextPosNote]]);
		}

		if (isChords) dealChords();
		else dealNotes();
	});

	console.log(AllPositions);
	return AllPositions;
}
 */
export function getPosbySeq2(
  Seq: string[][],
  allNotesFromFrets: string[][],
  frets: number
) {
  const Chords: Node[][][] = [];
  Seq.forEach((simultaneousNotes, simulIndex) => {
    const notesPos: Node[][] = [];
    simultaneousNotes.forEach((notefromSimultaneous, noteIndex) => {
      const notePos: Node[] = [];
      allNotesFromFrets.forEach((notesFromString, stringIndex) => {
        const fretIndex = notesFromString.findIndex(
          (noteFromString) => noteFromString === notefromSimultaneous
        );
        if (fretIndex !== -1)
          notePos.push({
            fret: fretIndex,
            string: stringIndex,
            note: notefromSimultaneous
          });
      });
      notesPos.push(notePos);
    });
    Chords.push(notesPos);
  });

  const ChordsPositions: [string, PosI][][] = [];

  Chords.forEach((simultaneousNotes, simulIndex) => {
    const Positions: [string, PosI][] = [];
    let noteInAnalysis: PosI;
    const stringsUsed: number[] = [];
    for (let i = 0; i < simultaneousNotes.length - 1; i++) {
      if (simultaneousNotes.length < 2) break;
      const Notes = simultaneousNotes[i];
      let nextNoteName = simultaneousNotes[i + 1][0].note;
      if (i === 0) {
        Positions.push([Notes[0].note, Notes[0]]);
        noteInAnalysis = { string: Notes[0].string, fret: Notes[0].fret };
        stringsUsed.push(noteInAnalysis.string);
      }

      const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } =
        vasculharChords(
          noteInAnalysis!,
          nextNoteName,
          allNotesFromFrets,
          frets,
          stringsUsed
        );
      stringsUsed.push(nextPosNote.string);
      noteInAnalysis = nextPosNote;
      Positions.push([nextNoteName, nextPosNote]);
    }
    ChordsPositions.push(Positions);
  });

  //console.log(ChordsPositions);
  return ChordsPositions;
}

/* export function getPosbySeq(Seq: string[], allNotesFromFrets: string[][], frets: number) {
	const NotesGrouped: Node[][] = [];

	Seq.forEach((noteFromSeq, index) => {
		const node: Node[] = [];
		allNotesFromFrets.forEach((notesFromString, stringIndex) => {
			notesFromString.forEach((noteFromString, fretIndex) => {
				if (noteFromString === noteFromSeq) {
					node.push({ fret: fretIndex, string: stringIndex, note: noteFromString });
				}
			});
		});
		NotesGrouped.push(node);
	});

	const Positions: [string, PosI][] = [];
	let noteInAnalysis: PosI;

	for (let i = 0; i < NotesGrouped.length - 1; i++) {
		if (NotesGrouped.length < 2) break;
		const Notes = NotesGrouped[i];
		let nextNoteName = NotesGrouped[i + 1][0].note;
		if (i === 0) {
			Positions.push([Notes[0].note, Notes[0]]);
			noteInAnalysis = { string: Notes[0].string, fret: Notes[0].fret };
		}

		const { eachStringWeight, biggetWeight, lowestWeight, nextPosNote } = vasculharNotes(noteInAnalysis!, nextNoteName, allNotesFromFrets, frets);
		noteInAnalysis = nextPosNote;
		Positions.push([nextNoteName, nextPosNote]);
	}

	return Positions;
}
 */
function vasculharNotes(
  NoteData: NotePositionType,
  note: string,
  allNotesFromFrets: string[][],
  frets: number
) {
  const eachStringWeight: number[][] = [];
  let biggetWeight = 0;
  let lowestWeight = 0;
  let nextPosNote: PosI = { string: 0, fret: 0 };
  let nextPosNotes: PosI[] = [];
  let nextNoteSmallestWeight = -1;

  for (let str = 0; str < 6; str++) {
    const fretWeight: number[] = [];
    for (let frt = 0; frt < frets; frt++) {
      let dist =
        Math.pow(Math.abs(NoteData.pos.string - str), 2) +
        Math.abs(NoteData.pos.fret - frt);
      if (frt === 0) dist = 3;

      fretWeight.push(dist);
      if (dist > biggetWeight) {
        biggetWeight = dist;
      }
      if (allNotesFromFrets[str][frt] === note) {
        if (nextNoteSmallestWeight === -1) {
          nextNoteSmallestWeight = dist;
          nextPosNote = { string: str, fret: frt };
          lowestWeight = dist;
        } else if (dist < nextNoteSmallestWeight) {
          nextNoteSmallestWeight = dist;
          nextPosNote = { string: str, fret: frt };
          lowestWeight = dist;
        }
        nextPosNotes.push({ string: str, fret: frt });
      }
    }
    eachStringWeight.push(fretWeight);
  }

  //the complexity of this function is O(n^2) because of the nested for loops
  return {
    eachStringWeight,
    biggetWeight,
    lowestWeight,
    nextPosNote,
    nextPosNotes
  };
}

function vasculharChords(
  pos: PosI,
  note: string,
  allNotesFromFrets: string[][],
  frets: number,
  stringsUsed: number[]
) {
  const eachStringWeight: number[][] = [];
  let biggetWeight = 0;
  let lowestWeight = 0;
  let nextPosNote: PosI = { string: 0, fret: 0 };
  let nextPosNotes: PosI[] = [];
  let nextNoteSmallestWeight = -1;

  for (let str = 0; str < 6; str++) {
    const fretWeight: number[] = [];
    for (let frt = 0; frt < frets; frt++) {
      let dist =
        Math.pow(Math.abs(pos.string - str), 2) + Math.abs(pos.fret - frt);
      if (frt === 0) dist = 3;

      fretWeight.push(dist);
      if (dist > biggetWeight) {
        biggetWeight = dist;
      }
      if (allNotesFromFrets[str][frt] === note && !stringsUsed.includes(str)) {
        if (nextNoteSmallestWeight === -1) {
          nextNoteSmallestWeight = dist;
          nextPosNote = { string: str, fret: frt };
          lowestWeight = dist;
        } else if (dist < nextNoteSmallestWeight) {
          nextNoteSmallestWeight = dist;
          nextPosNote = { string: str, fret: frt };
          lowestWeight = dist;
        }
        nextPosNotes.push({ string: str, fret: frt });
      }
    }
    eachStringWeight.push(fretWeight);
  }

  //the complexity of this function is O(n^2) because of the nested for loops
  return {
    eachStringWeight,
    biggetWeight,
    lowestWeight,
    nextPosNote,
    nextPosNotes
  };
}

/* 

function vasculhar(pos: PosI, note: string, allNotesFromFrets: string[][], frets: number) {
	const eachStringWeight: number[][] = [];
	let biggetWeight = 0;
	let lowestWeight = 0;
	let nextPosNote: PosI = { string: 0, fret: 0, note };
	let nextPosNotes: PosI[] = [];
	let nextNoteSmallestWeight = -1;

	for (let str = 0; str < 6; str++) {
		const fretWeight: number[] = [];
		for (let frt = 0; frt < frets; frt++) {
			let dist = Math.pow(Math.abs(pos.string - str), 2) + Math.abs(pos.fret - frt);
			if (frt === 0) dist = 3;

			fretWeight.push(dist);
			if (dist > biggetWeight) {
				biggetWeight = dist;
			}
			if (allNotesFromFrets[str][frt] === note) {
				if (nextNoteSmallestWeight === -1) {
					nextNoteSmallestWeight = dist;
					nextPosNote = { string: str, fret: frt, note };
					lowestWeight = dist;
				} else if (dist < nextNoteSmallestWeight) {
					nextNoteSmallestWeight = dist;
					nextPosNote = { string: str, fret: frt, note };
					lowestWeight = dist;
				}
				nextPosNotes.push({ string: str, fret: frt, note });
			}
		}
		eachStringWeight.push(fretWeight);
	}

	//the complexity of this function is O(n^2) because of the nested for loops
	return { eachStringWeight, biggetWeight, lowestWeight, nextPosNote, nextPosNotes };
}

*/
